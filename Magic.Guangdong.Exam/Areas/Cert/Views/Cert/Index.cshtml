@{
    Layout = "../Shared/_LayoutContent.cshtml";
}
<div style="padding:15px">
    <form class="layui-form">
        <div class="layui-form-item layui-row layui-col-space16">
            <div class="layui-col-md2">
                <div class="layui-input-wrap">
                    <div class="layui-input-prefix">
                        <i class="layui-icon layui-icon-flag"></i>
                    </div>
                    <select id="activityId" lay-filter="activityId">
                        <option value="">请选择归属活动(如果有)</option>

                    </select>
                </div>
            </div>
            <div class="layui-col-md2">
                <div class="layui-input-wrap">
                    <div class="layui-input-prefix">
                        <i class="layui-icon layui-icon-note"></i>
                    </div>
                    <select id="examId" lay-filter="examId">
                        <option value="">请选择归属考试(如果有)</option>

                    </select>
                </div>
            </div>
            <div class="layui-col-md2">
                <div class="layui-input-wrap">
                    <div class="layui-input-prefix">
                        <i class="layui-icon layui-icon-form"></i>
                    </div>
                    <select id="templateId" lay-filter="templateId">
                        <option value="">请选择对应模板</option>

                    </select>
                </div>
            </div>
            <div class="layui-col-md2">
                <div class="layui-input-wrap">
                    <div class="layui-input-prefix">
                        <i class="layui-icon layui-icon-search"></i>
                    </div>
                    <input type="text" id="keyword" placeholder="关键字" class="layui-input">
                </div>
            </div>
            <div class="layui-col-md2">
                <div class="layui-input-wrap">
                    <a class="layui-btn demo-dropdown-base" lay-options="{trigger: 'hover'}" href="javascript:;">
                        <span>选择操作</span>
                        <i class="layui-icon layui-icon-down layui-font-12"></i>
                    </a>
                </div>
            </div>

        </div>
        <div class="layui-row layui-progress layui-progress-big" lay-showPercent="true" lay-filter="genProgress">

            <div class="layui-progress-bar layui-bg-blue" lay-percent="0%"></div>

        </div>
    </form>

    <table class="layui-table" lay-filter="table" id="table"></table>
</div>
<script type="text/html" id="statusTpl">
     {{# if(d.status==0){ }}
    <span class="layui-badge layui-bg-green">展示中</span>
    {{# } else { }}
    <span class="layui-badge">已下线</span>
    {{# } }}
</script>

<script type="text/html" id="operationTpl">
    <a class="layui-btn layui-btn-normal" href="{{ baseDownloadUrl + d.url }}" target="_blank">查看证书</a>
</script>

<script>
    let form = layui.form;
    let dropdown = layui.dropdown;
    let activityId = 0;
    let templateId = 0;
    let examId = '';
    let element = layui.element;

    baseDownloadUrl = "@Magic.Guangdong.Assistant.ConfigurationHelper.GetSectionValue("resourceHost")";
    dropdown.render({
        elem: '.demo-dropdown-base', // 绑定元素选择器，此处指向 class 可同时绑定多个元素
        data: [{
            title: '下载模板',
            id: 'downloadTemplate'
        }, {
            title: '导入模板',
            id: 'importCerts'
        }, {
            title: '导出记录',
            id: 'exportCerts'
        }, {
            title: '批量展示',
            id: 'bulkShow'
        }, {
            title: '批量下架',
            id: 'bulkDrop'
        }, {
            title: '批量删除',
            id: 'bulkDelete'
        }
        ],
        click: function (obj) {
            console.log(obj)
            this.elem.find('span').text(obj.title);
            setTimeout(() => {
                this.elem.find('span').text('选择操作');
            }, 2000)
            if(obj.id == 'bulkShow'){
                bulkEdit(0);
            }
            else if(obj.id == 'bulkDrop'){
                bulkEdit(1);
            } 
            else if (typeof window[obj.id] === 'function') {                
                window[obj.id]();
            } else {
                errorMsg(`【${obj.title}】未指定动作`);
            }
        }
    });

    function downloadTemplate() {
        let loadIndex = layer.load();
        axios.get('@Url.Action("GenerationImportTemplate")')
            .then((data) => {
                layer.close(loadIndex);
                if (data.status == 200) {
                    let json = data.data;
                    window.open("@Magic.Guangdong.Assistant.ConfigurationHelper.GetSectionValue("resourceHost")" + json.data)
                } else {
                    layer.msg("模板下载失败", { icon: 2 });
                }
            })
    }

    function importCerts(){
        layer.open({
            type: 2,
            shade: [0.3, '#393D49'],
            area: ['70%', '96%'],
            title: "导入名单",
            maxmin: true,
            content: `@Url.Action("Import")`,
            zIndex: layer.zIndex,
            success: function (layero) {
                //弹出后回调
                layer.setTop(layero);
            },
            end: function () {
                //关闭弹窗，重新加载列表
                //getTable(params);
                location.reload();
            }
        });
    }

    getSelectItems('/report/activity/getactivitydrops', { rd: randomInt }, 'selectTpl', 'activityId', true);
    getSelectItems('/exam/examination/getexammini', { id: '', type: 0, examType:0, rd: randomInt }, 'selectTpl', 'examId', true)
    getSelectItems('/Cert/CertTemplate/GetTemplateDrops', { rd: randomInt }, 'selectTpl', 'templateId', true)
    form.on('select(activityId)', (data) => {
        activityId = data.value
        getSelectItems('/exam/examination/getexammini', { id: activityId, type: 0, examType: 0,rd: randomInt }, 'selectTpl', 'examId', false)
            .then(v => {
                form.render('select')
            })
        getSelectItems('/Cert/CertTemplate/GetTemplateDrops', { activityId: activityId, rd: randomInt }, 'selectTpl', 'templateId', false)
            .then(v => {
                form.render('select')
            })
        getCerts();
    })
    form.on('select(examId)', (data) => {
        examId = data.value;
        getCerts();
    })
    form.on('select(templateId)', (data) => {
        templateId = data.value;
        getCerts();
    })

    getCerts();
    function getCerts(){
        var params = {
            url: '@Url.Action("GetCerts")',
            elem: '#table',
            where: makeWhereJson(),
            size: 'lg',
            page: true,
            cols: [ //表头
                { title: '序号', templet: "#indexTpl", width: "6%", type: "checkbox" }
                , { field: 'id', title: 'id', hide: true }
                , { field: 'title', title: '证书标题', width: "15%" }
                , { field: 'awardName', title: '获奖人员', width: "15%" }
                , { field: 'certNo', title: '证书编号', width: "12%" }
                , { field: 'idNumber', title: '唯一ID号', width: "12%" }
                , { title: '状态', templet: '#statusTpl', width: "10%" }
                , { field: 'createdAt', title: '发放时间', width: "12%" }
                , { title: '操作', templet: '#operationTpl' }
            ],
            height: 630
        }
        getTable(params);
    }

    function makeWhereJson() {
        let whereJsonStr = {
            "Logic": "And",
            "Filters": [{
                "Field": "IsDeleted",
                "Operator": "Equal",
                "Value": 0
            }]
        }
        let keyword = jVal("keyword");
        if (keyword) {
            whereJsonStr.Filters.push({
                "Logic": "Or",
                "Filters": [{
                    "Field": "AwardName",
                    "Operator": "Equal",
                    "Value": keyword
                },
                {
                    "Field": "CertNum",
                    "Operator": "Equal",
                    "Value": keyword
                },
                {
                    "Field": "Title",
                    "Operator": "Contains",
                    "Value": keyword
                }]
            });
        }
        if (templateId > 0) {
            whereJsonStr.Filters.push({
                "Logic": "And",
                "Filters": [{
                    "Field": "templateId",
                    "Operator": "Equal",
                    "value": templateId,
                }]
            })
        }
        if (activityId > 0) {
            whereJsonStr.Filters.push({
                "Logic": "And",
                "Filters": [{
                    "Field": "activityId",
                    "Operator": "Equal",
                    "value": activityId,
                }]
            })
        }
        if (examId) {
            whereJsonStr.Filters.push({
                "Logic": "And",
                "Filters": [{
                    "Field": "ExamId",
                    "Operator": "Equal",
                    "value": examId,
                }]
            })
        }
        return {
            'whereJsonStr': JSON.stringify(whereJsonStr),
            'orderby': 'Id',
            'isAsc': false,
            'rd': randomInt
        };
    }

    async function exportCerts() {
        let formData = new FormData();
        formData.append('whereJsonStr',JSON.stringify(makeWhereJson()));
        formData.append('__RequestVerificationToken',requestToken);
        var ret = await request('POST', '/cert/cert/ExportCertRecords', formData, { 'Content-Type': 'multipart/form-data' });
        if(ret.code==0){
            successMsg('导出成功')
            window.open(ret.data);
        } else {
                errorMsg('导出失败'+ret.msg);
        }
    }


    //批量更新
    function bulkEdit(status){
        let currTable = layui.table
            // 复选框事件
           // 获取选中行相关数据
        var tableStatus = currTable.checkStatus('table');
        // console.log(tableStatus.data) // 选中行的数据
        // console.log(tableStatus.data.length) // 选中行数量，可作为是否有选中行的条件
        // console.log(tableStatus.isAll ) // 表格是否全选
        var formData = new FormData();
        if(tableStatus.data.length==0){
            layer.confirm("未勾选任何选项，执行此操作，会以当前检索条件为准，批量修改数据("+$($('.layui-laypage-count')[0]).text()+")，确定继续执行吗?",{icon:0},async function(index){
                layer.close(index);
                formData = objectToFormData({ "whereJsonStr": makeWhereJson().whereJsonStr,"status": status,"__RequestVerificationToken": requestToken})
                var ret = await request('POST', '/cert/cert/BulkUpdateCertByQuery', formData, { 'Content-Type': 'multipart/form-data' })
                if(ret.code==0){
                   successMsg("修改成功");
                   getCerts();
                   return;
                }
                errorMsg("修改失败"+ret.msg);
            })
        }else{
            let certIds = tableStatus.data.map(u=>u.id)
            console.log(certIds)
            layer.confirm("确定要更新所勾选的记录吗?",{icon:0}, async function(index){
                layer.close(index);

                formData = objectToFormData({ "status": status,"__RequestVerificationToken": requestToken})
                
                certIds.forEach((certId) => {
                   formData.append('certIds[]', certId);
                 });
                var ret = await request('POST', '/cert/cert/BulkUpdateCertByIds', formData, { 'Content-Type': 'multipart/form-data' })
                if(ret.code==0){
                   successMsg("修改成功");
                   getCerts();
                   return;
                }
                errorMsg("修改失败"+ret.msg);
            })
        }

    }


    getCertGenProgress()
    let finished=false;
    $('.layui-progress').hide();
    function getCertGenProgress(){
         const eventSource = new EventSource('@Url.Action("GetCertGenerationProgress")');
            eventSource.onmessage = function (event) {
                const progressData = JSON.parse(event.data);
                const progress = progressData.progress;
                // 更新页面上显示进度的元素，这里简单示例用一个div模拟进度条展示，实际可能用专业的进度条组件等
                //$('#progress').val(`Progress: ${progress}`);
                 element.progress('genProgress', `${progress}%`);

                 if(!finished){
                     successMsg(progressData.msg);
                 }

                 if(progress=='100'){
                     finished = true;
                     $('.layui-progress').hide();
                     return;
                 }

                 $('.layui-progress').show();
            };
            eventSource.onerror = function (error) {
                // finished = true;
                // errorMsg('尝试建立SSE链接失败，请刷新页面重试');

                // //console.log('Error in SSE connection:', error);
                // eventSource.close();
            };
    }
</script>