@{
    Layout = "../Shared/_LayoutContent.cshtml";
}
@model Magic.Guangdong.DbServices.Dtos.Cert.TemplateDto

<style>
    /* 容器，相对定位 */
    .box {
        position: relative;
    }

    /* 画布，给个边框 */
    #canvas {
        border: 1px solid #ccc;
    }

    /* 菜单 */
    .menu-x {
        visibility: hidden; /* 隐藏菜单 */
        z-index: -100;
        position: absolute;
        top: 0;
        left: 0;
        box-sizing: border-box;
        border-radius: 4px;
        box-shadow: 0 0 4px rgba(0, 0, 0, 0.3);
        background-color: #fff;
    }

</style>

<div class="layui-row">
    <a class="layui-btn layui-btn-primary" id="btnBack" href="javascript:;" style="margin:15px">返回</a>
    <fieldset class="layui-elem-field" style="margin:15px">
        <legend>预设参数</legend>
        <div class="layui-field-box box">
            <form class="layui-form layui-row layui-col-space16">
                <div class="layui-col-sm2">
                    <input class="text layui-input" type="number" step="1" min="0" id="fontSize" placeholder="字体大小">

                </div>
                <div class="layui-col-sm2">
                    <input class="text layui-input" type="number" step="1" min="0" id="row_maxwords" placeholder="每行字数（合成时生效）">
                </div>
                <div class="layui-col-sm2">
                    <input class="text layui-input" type="number" step="1" min="0" id="row_spacing" placeholder="行间距（合生成时生效）">
                </div>
                <div class="layui-col-sm2">
                    <select id="specialHandle" lay-filter="specialHandle">
                        <option value="0">无特殊处理</option>
                        <option value="1">双内容折行(遇到2个对应属性的数据则自动这行)</option>
                        <option value="2" disabled>按需增加(滚雪球，建议不要增加过多特殊情况)</option>
                    </select>
                </div>

                <div class="layui-col-sm3">
                    <div class="layui-input-inline">
                        <input type="text" name="color" value=""  placeholder="请选择文字颜色" class="layui-input" id="fontColor">
                    </div>
                    <div class="layui-inline" style="left: -5px;">
                        <div id="colorpicker"></div>
                    </div>

                    <a class="layui-btn layui-btn-danger" href="javascript:;" onclick="clearAll()">清空所有元素</a>
                </div>
            </form>
        </div>
    </fieldset>

    <fieldset class="layui-elem-field" style="margin:15px">
        <legend>预览证书</legend>
        <div class="layui-field-box box" id="fabricDiv">
            <blockquote class="layui-elem-quote">注意：为了避免图片缩放导致证书合成时出现的偏移量问题，这里画布展示的是原图尺寸的证书模板，注意通过调整滚动条来定位证书合成元素的位置。</blockquote>
            <canvas id="c" style="border: 1px solid #ccc;"></canvas>
            <img id="template" src="@Model.Url" alt="templateModel" style="display:none" />
        </div>
    </fieldset>

    <div id="menu" class="menu-x">
        <ul class="layui-menu">
            <li class="layui-menu-item-parent" lay-options="{type: 'parent'}">
                <div class="layui-menu-body-title">
                    创建文字
                    <i class="layui-icon layui-icon-right"></i>
                </div>
                <div class="layui-panel layui-menu-body-panel">
                    <ul>
                        <li onclick="addTextStep1('获奖者姓名')"><div class="layui-menu-body-title">获奖者名称</div></li>
                        <li onclick="addTextStep1('证书编号')"><div class="layui-menu-body-title">证书编号</div></li>
                        <li onclick="addTextStep1()"><div class="layui-menu-body-title">自定义内容(可多次创建)</div></li>
                    </ul>
                </div>
            </li>
            <li onclick="addGeometry('qrcode')"><div class="layui-menu-body-title">创建二维码</div></li>
            <li onclick="previewCert()"><div class="layui-menu-body-title">预览</div></li>
            <li onclick="saveCanvas()"><div class="layui-menu-body-title">保存</div></li>
            <li onclick="delEl()"><div class="layui-menu-body-title">删除当前元素</div></li>
            <li onclick="clearAll()"><div class="layui-menu-body-title">清理画布</div></li>
        </ul>
    </div>
</div>
<script src="~/plugins/fabric.js/fabric.min.js"></script>
<script src="~/web/cert/template.js"></script>
<script>
    let number = 1;
    let valueArr = [];
    let path = getUrlQueryParams('path');
    let from = getUrlQueryParams('from');
    // 当前鼠标位置
    let pointX = 0;
    let pointY = 0;
    let padding = 50;
    let certParam = {
        certTempUrl: '',
        certTempData: '',
        contentList: [],
        imgList:[]
    };

    let canvas = new fabric.Canvas('c', {
        fireRightClick: true // 启用右键，button的数字为3
        , stopContextMenu: true // 禁止默认右键菜单
        , preserveObjectStacking: true // 元素保持原有层级
        , backgroundColor: '#fafafa' // 将背景色设置为亮粉色
    });

    // 文档加载后执行
    window.onload = function () {

        let imgObj = {};
        if (path) {
            path = atob(decodeURIComponent(path))
            $('#template').attr('src', path);
            loadImg();
        }

        if (from)
            $('#btnBack').attr('href', atob(decodeURIComponent(from)));
        else
            $('#btnBack').attr('href', '/cert/certtemplate/index');
        // 输出当前 fabric 版本
        console.log(`Facrib.js版本：${fabric.version}`)

        // 按下鼠标
        canvas.on('mouse:down', canvasOnMouseDown)

        canvas.on('object:moving', handleObjectMoving);

        // 禁止在菜单上的默认右键事件
        menu.oncontextmenu = function (e) {
            e.preventDefault()
        }
        setTimeout(() => {
            number = canvas.getObjects().length
        }, 500)
    }

    function clearAll() {
        canvas.clear()
        localStorage.removeItem('canvasJson')
        localStorage.removeItem('templateJson')
        $('#template').attr('src', path);
        loadImg();
        valueArr = [];
        hiddenMenu();
    }


    function addTextStep1(value) {
        if (!value) {
            layer.prompt({ title: '输入占位文字', formType: 2 }, (text, index) => {
                layer.close(index)
                addTextStep2(text)
            })
            return;
        }
        addTextStep2(value)
    }

    function addTextStep2(value) {
        // if (valueArr.includes(value)) {
        //     errorMsg('该属性已添加');
        //     return;
        // }
        let fontObj = {
            left: pointX, 
            top: pointY, 
            fontSize: 36, 
            fill: '#000000',
            width: 100,
            fontFamily: 'Arial',
            //fill: getRandomHexColor()
        }
        if (jVal('fontSize'))
            fontObj.fontSize = parseInt(jVal('fontSize'))
       
        if(jVal('fontColor'))
            fontObj.fill = jVal('fontColor')
       
        let content = `[${(number++)}.${value}]`;
        //valueArr.push(content);
        let text = new fabric.Textbox(content, fontObj);
        text.set('customData', {
            id: 'text_' + (number-1),
            content: value
        });
        canvas.add(text);
        //canvas.add(new fabric.Textbox(`Lorum ipsum dolor sit amet`, fontObj));
        hiddenMenu();
    }

    function addGeometry(key) {
        if (valueArr.includes(key)) {
            errorMsg('目前只支持放置一张二维码占位图')
            return;
        }
        valueArr.push(key)
        // 这里使用Fabric.js创建并添加一个几何图形，例如矩形：
        const rect = new fabric.Rect({ left: pointX, top: pointY, width: 140, height: 140, fill: getRandomHexColor() });
        rect.set('customData', {
            id: key,
            content: '图片元素'
        });
        canvas.add(rect);
        hiddenMenu();
    }


    function buildParam() {   
        
        if (canvas._objects && canvas._objects.length > 1) {
            certParam.contentList = [];
            certParam.imgList = [];
            let row_maxwords = jVal('row_maxwords') ? parseInt(jVal('row_maxwords')) : 0;
            let row_spacing = jVal('row_spacing') ? parseInt(jVal('row_spacing')) : 0;
            if (row_maxwords > 0 && row_spacing == 0) {
                row_spacing = 100;
            }
          
            for (let i = 1; i < canvas._objects.length; i++) {
                let item = canvas._objects[i];
                if (item.text) {
                    certParam.contentList.push({
                        content: item.text,
                        location_x: item.left-padding,
                        location_y: item.top - padding,
                        fontSize: item.fontSize * item.zoomX * item.zoomY,
                        orderIndex: i,
                        fontColor: item.fill,
                        row_maxwords: row_maxwords,
                        row_spacing: row_spacing,
                        key: item.text.match(/[\u4e00-\u9fa5]+/g)[0]
                    })
                } else {
                    certParam.imgList.push({
                        imgUrl: '',
                        imgData:null,
                        location_x: item.left - padding,
                        location_y: item.top - padding,
                        orderIndex: i,
                        width: item.width,
                        height: item.heigth,
                        imgType:0,
                        key: 'qrcode'
                    })
                }

            }
        }
    }

    //预览结果
    async function previewCert() {
        buildParam()
        layer.load();
        let formData = new FormData();
        formData.append('config_str', JSON.stringify(certParam));
        formData.append('filename', 'test');
        formData.append('__RequestVerificationToken', requestToken);

        let ret = await request('POST', '/cert/certtemplate/Preview', formData,CT)
       
        let baseUrl = `${location.protocol}//${location.host}`;
        layer.closeAll('loading');
        window.open(baseUrl + ret.data);
        hiddenMenu();
    }

    function saveCanvas() {
        buildParam()
        localStorage.setItem('templateJson', JSON.stringify(certParam));
        localStorage.setItem('canvasJson', JSON.stringify(canvas.toJSON()));
        //console.log(certParam) // 在控制台输出结果
        hiddenMenu();
        successMsg('保存成功')
    }
</script>