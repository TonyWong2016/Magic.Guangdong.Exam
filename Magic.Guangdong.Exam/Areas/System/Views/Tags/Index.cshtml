@{
    Layout = "../Shared/_LayoutContent.cshtml";
}

<div class="layui-row" style="padding:15px">
    <blockquote class="layui-elem-quote">
        标签是一种虚拟的关联标识，类似各大云服务厂商提供的标签功能，可以跨模型，将两个看似毫不相干的实体建立联系。这里的作用包括但不限于以下几点<br />
       
        <ol>
            <li><span class="layui-badge layui-badge-dot layui-bg-blue"></span> 1.为实体添加分类，方便检索，例如：添加一个标签“已发布”</li>
            <li><span class="layui-badge layui-badge-dot layui-bg-blue"></span> 2.考试系统为了保持其自身的通用性，又想方便的与外部系统进行关联，比如创建“组别”标签，关联申报系统的“组别”数据，可以在抽卷时将指定用户抽取指定组别的试卷</li>
            <li><span class="layui-badge layui-badge-dot layui-bg-blue"></span> ...更多标签功能待开发</li>
        </ol>
    </blockquote>
    <form class="layui-form" lay-filter="formFilter">
        <div class="layui-row layui-col-space10 layui-form-item">
            <div class="layui-col-md4">
                <input class="layui-input" id="keyword" placeholder="输入标准关键字" />

            </div>
            <div class="layui-col-md4">
                <a class="layui-btn" href="javascript:;" onclick="CreateTag()"><i class="layui-icon layui-icon-add-1"></i> 新增</a>
            </div>
        </div>
    </form>

    <table class="layui-table" id="table" lay-filter="table"></table>

</div>


<script type="text/html" id="operationTpl">
    <a class="layui-btn layui-btn-primary layui-border-blue" href="javascript:;" onclick="warnMsg('稍后支持')"><i class="layui-icon layui-icon-template"></i>查看资源(稍后支持)</a>

    <a class="layui-btn layui-btn-primary layui-border-red" href="javascript:;" onclick="RemoveTag('{{d.id}}')"><i class="layui-icon layui-icon-delete"></i>删除</a>

</script>
<script>
    let token = $('@Html.AntiForgeryToken()').val();
    getList();
    autoSearch('keyword', function () {
        getList();
    })
    function getList() {
        layer.load();
        let params = {
            url: '@Url.Action("GetList")',
            elem: '#table',
            where: makeWhereJson(),
            size: 'lg',
            page: true,
            cols: [ //表头
                { title: '序号', templet: '#indexTpl', width: '10%' }
                // { field: 'id', title: 'id', type: 'checkbox' }
                , { title: '标签名(可修改)', field:'title', edit: 'text' }
                , { field: 'createdAt', title: '创建时间'}
                , { title: '操作', templet: '#operationTpl' }
            ],
            height: 630,
            nomsg: true //不在弹出提示
        };
        getTable(params);
        
    }
    let _table = layui.table;
    _table.on('edit(table)',async (obj)=>{
        console.log(obj.value); //得到修改后的值
        console.log(obj.field); //当前编辑的字段名
        console.log(obj.data); //所在行的所有相关数据
        obj.data.__RequestVerificationToken=token;
        let formData = objectToFormData(obj.data);
        var ret = await request('POST', '@Url.Action("Edit")', formData, CT);
        if (ret.code == 0) {
            successMsg('保存成功');
            return;
        }
        errorMsg('操作失败：' + ret.msg);

    })
    function makeWhereJson() {
        whereJsonStr = {
            'Logic': 'And',
            'Filters': [{
                'Field': 'IsDeleted',
                'Operator': 'Equal',
                'Value': 0
            }]
        };
        if (jVal('keyword')) {
            whereJsonStr.Filters.push({
                'Field': 'Title',
                'Operator': 'Equal',
                'Value': jVal('keyword')
            });
        }
        return { 'whereJsonStr': JSON.stringify(whereJsonStr), 'orderby': 'createdAt', 'isAsc': true, 'rd': randomInt }
    }

    function CreateTag(){
        layer.prompt({ title: '输入新的标签名称', formType: 0 }, async function (value, index, elem) {
            if (value === '') {
                errorMsg('标签不能为空');
                return;
            }

            let formData = objectToFormData({title:value, __RequestVerificationToken:token});
            let ret = await request('POST', '@Url.Action("Create")', formData, { 'Content-Type': 'multipart/form-data' });
            if(ret.code==0){
                layer.closeAll();
                successMsg(ret.msg);
                getList();
                return;
            }
            errorMsg(ret.msg);
        })
    }

    function RemoveTag(id,force=false){
        let msg = force?'强制删除后，该标签下的所有资源数据也会被删除，确定删除？':'确定删除该标签？';
        layer.confirm(msg, {icon: 0, title:'提示'}, async function(index){
            layer.close(index);
            let formData = objectToFormData({id:id,force:force, __RequestVerificationToken:token });
            var ret = await request('POST', '@Url.Action("Remove")', formData, CT);
            if(ret.code==0){
                successMsg(ret.msg);
                getList();
                return;
            } else if(ret.code==1){
                layer.alert('存在绑定了该标签的资源数据，标签删除后，这些资源和标签也会接触绑定，是否继续?',{icon:0},function(){
                    RemoveTag(id,true);
                })
                return;
            }
            errorMsg(ret.msg);
        })
    }
</script>