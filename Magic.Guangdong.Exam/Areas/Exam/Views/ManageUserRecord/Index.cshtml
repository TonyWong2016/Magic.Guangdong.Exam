@{
    Layout = "../Shared/_LayoutContent.cshtml";
}
<div class="layui-row" style="padding:15px">
    <form class="layui-form">
        <div class="layui-form-item layui-row layui-col-space16">
            <div class="layui-col-md2">
                <select id="associationIdView" lay-filter="associationId" lay-search>
                </select>
            </div>

            <div class="layui-col-md1">
                <select id="examType" lay-filter="examType" name="examType" class="layui-select">
                    <option value="-1">考试类型</option>
                    <option value="0">考试</option>
                    <option value="1">练习</option>
                </select>
            </div>

            <div class="layui-col-md2">
                <select id="examId" lay-filter="examId" name="examId" class="layui-select" lay-search>
                    <option value="-1">请选择考试</option>
                </select>
            </div>

            <div class="layui-col-md2">
                <select id="paperId" lay-filter="paperId" name="paperId" class="layui-select">
                    <option value="-1">请选择试卷</option>
                </select>
            </div>
            <div class="layui-col-md2">
                <input class="layui-input" id="keyword" placeholder="输入答题人准考证号或分数" />
                @*注意，这里一个账号查出多条记录是正常现象*@
            </div>

            <div class="layui-col-md1">
                <select id="isComplated" lay-filter="isComplated" name="isComplated" class="layui-select">
                    <option value="-1">是否交卷</option>
                    <option value="0">未交卷</option>
                    <option value="1">已交卷</option>

                </select>
            </div>


            <div class="layui-col-md1">
                <input type="checkbox" id="showDeleted" lay-filter="showDeleted" title="查看被清除的记录" lay-skin="primary">
            </div>
        </div>
        <div class="layui-btn-container">
            <a href="javascript:;" onclick="exportRecord()" class="layui-btn"><i class="layui-icon layui-icon-export"></i>导出</a>
           
            <a href="javascript:;" onclick="ForceMarkingBatch()" class="layui-btn layui-btn-danger"><i class="layui-icon layui-icon-fire"></i>强制交卷</a>
            <span id="queryGroup"></span>
        </div>
        @* <blockquote class="layui-elem-quote">注意，【同步成绩】和【强制交卷】的操作必须在对应的考试结束后执行。</blockquote> *@

    </form>
    <table class="layui-table" id="table" lay-filter="table"></table>

</div>

<script type="text/html" id="activityTpl">
    <option>请选择活动</option>
    {{# layui.each(d,function(index,item){}}
    <option value="{{ item.value }}">{{item.text}}</option>
    {{# }) }}
</script>

<script type="text/html" id="examTplInit">
    <option value="0">请选择考试</option>
    {{# layui.each(d,function(index,item){}}
    <option value="{{ item.value }}">{{item.text}}</option>
    {{# }) }}
</script>

<script type="text/html" id="paperTplInit">
    <option value="0">请选择试卷</option>
    {{# layui.each(d,function(index,item){}}
    <option value="{{ item.value }}">{{item.text}}</option>
    {{# }) }}
</script>


<script type="text/html" id="userNameTpl">
    {{ decodeURIComponent(d.userName) }}
</script>

<script type="text/html" id="complatedTpl">
    {{# if(d.complated==0){ }}
        <span class="layui-badge">否</span>
    {{#} else { }}
        <span class="layui-badge layui-bg-green">是</span>
    {{#} }}
</script>

<script type="text/html" id="markedTpl">
    {{# if(d.marked==2 && d.includeSubjective==0){ }}
        <b style="color:#029AE8">已出分</span>
    {{# } else if(d.marked==1){ }}
        <b style="color:#79C0FF">客观题已出分</span>
    {{#} else if(d.marked==2 && d.includeSubjective==1) { }}
        <b style="color:#029AE8">主/客观题均出分</span>
    {{#} else { }}
        <b style="color:#2f363c">待出分</span>
    {{#} }}
</script>

<script type="text/html" id="examTitleTypeTpl">
    {{# if(d.examType==0){ }}
        {{ d.examTitle }}(考试)
    {{#} else { }}
        {{ d.examTitle }}(练习)
    {{#} }}
</script>

<script type="text/html" id="degreeTpl">
    {{# if(d.paperDegree=="all"||(d.paperDegree.indexOf("easy")>-1 && d.paperDegree.indexOf("normal")>-1 && d.paperDegree.indexOf("difficult")>-1)){ }}
    未限制
    {{# } else if(d.paperDegree.indexOf("easy")>-1 && d.paperDegree.indexOf("normal")>-1) { }}
    容易，普通
    {{# } else if(d.paperDegree.indexOf("easy")>-1 && d.paperDegree.indexOf("difficult")>-1) { }}
    容易，困难
    {{# } else if(d.paperDegree.indexOf("normal")>-1 && d.paperDegree.indexOf("difficult")>-1) { }}
    普通，困难
    {{# } else if(d.paperDegree.indexOf("easy")>-1 ) { }}
    容易
    {{# } else if(d.paperDegree.indexOf("normal")>-1 ) { }}
    普通
    {{# } else if(d.paperDegree.indexOf("difficult")>-1 ) { }}
    困难
    {{#} }}
</script>

<script type="text/html" id="operationTpl">

    {{# if(d.isDeleted==0){ }}
    <a class="layui-btn layui-btn-primary layui-border-blue" href="@Url.Action("Detail")?paperId={{d.paperId}}&urid={{d.id}}"><i class="layui-icon layui-icon-file-b"></i>详情</a>
    <a class="layui-btn layui-btn-primary layui-border-red" href="javascript:;" onclick="RemoveUserRecord('{{d.id}}')"><i class="layui-icon layui-icon-tips"></i>清除</a>
    {{#} else{ }}
    <a class="layui-btn layui-btn-disabled" href="javascript:;"><i class="layui-icon layui-icon-tips"></i>已清除</a>
    {{#}  }}
</script>

<script src="~/plugins/xm-select.js"></script>
<script src="~/web/myxselect.js"></script>
<script>

    let form = layui.form;
    let whereJsonStr = '';
    let examId = '0';
    let paperId = '0';
    let token = $('@Html.AntiForgeryToken()').val();//token，防csrf
    let showDeleted = 0;
    let isComplated = -1;
    let examType='-1';
    let associationId;
    let examValues = [];
    if (sessionStorage.getItem('lastExamValues'))
        examValues = JSON.parse(sessionStorage.getItem('lastExamValues'))

    form.render('checkbox');

    getSelectItems('/report/activity/getactivitydrops', { rd: randomInt }, 'activityTpl', 'associationIdView', false)
        .then(v => {
            //getUserRecord()
            showLastQuery();
        })

    form.on('select(associationId)', function (data) {        
        associationId = data.value;
        layer.load();
        getExams();
        getUserRecord()
    })

    form.on('checkbox(showDeleted)', (data) => {
        data.elem.checked ? showDeleted = 1 : showDeleted = 0;
        getUserRecord()
    })

    form.on('select(examType)', data => {        
        getExams();
        examType = data.value;
        getUserRecord()
    })


    function getExams() {
        examId = '0';
        let queryModel = { 'id': associationId, 'type': 0 };
        if (jVal('examType'))
            queryModel.examType = jVal('examType');
        getSelectItems('/exam/Examination/GetExamMini', queryModel, 'selectTpl', 'examId', false);
        //getUserRecord()
        layer.closeAll('loading');
    }

    form.on('select(examId)', v => {
        examId = v.value;
        if (examId == '0')
            getSelectItems('/exam/Paper/GetPaperMini', {}, 'paperTplInit', 'paperId', false);
        else {
            getSelectItems('/exam/Paper/GetPaperMini', { 'examId': examId }, 'paperTplInit', 'paperId', false)
        }
        getUserRecord();
    })

    form.on('select(paperId)', v => {
        paperId = v.value
        getUserRecord();
    })

    form.on('select(isComplated)', v => {
        isComplated = v.value;
        getUserRecord();
    })

    autoSearch('keyword', function () {
        getUserRecord();
    })

    function getUserRecord() {
        layer.load();
        let params = {
            url: '@Url.Action("GetUserRecord")?isasc=false&orderby=updatedat',
            elem: '#table',
            where: { 'whereJsonStr': JSON.stringify(makeWhereJson()) },
            size: 'lg',
            page: true,
            cols: [ //表头
                // { title: '序号', templet: '#indexTpl', width: '6%' }
                 { field: 'id', title: 'id',  type: 'checkbox' }                
                , { templet: '#userNameTpl', title: '答题账号', width: '8%' }
                , { field: 'idNumber', title: '证件号/考号', width: '15%' }
                // , { field: 'examTitle', title: '考试', width: '12%' }
                , { templet: '#examTitleTypeTpl', title: '考试', width: '12%' }
                , { field: 'paperTitle', title: '试卷', width: '12%' }
                , { templet: '#markedTpl', title: '判分情况', width: '12%' }
                , { templet: '#complatedTpl', title: '是否交卷', width: '8%' }
                , { field: 'score', title: '当前总得分', width: '9%' }
                , { title: '操作', templet: '#operationTpl' }
            ],
            height: 630,
            nomsg: true //不在弹出提示
        };
        getTable(params);
    }

    async function exportRecord() {
        let formData = new FormData();
        formData.append('whereJsonStr', JSON.stringify(makeWhereJson()));
        formData.append('__RequestVerificationToken', requestToken)
        var ret = await request('POST', '@Url.Action("ExportUserRecord")', formData, { 'Content-Type': 'multipart/form-data' });
        layer.closeAll('loading');
        if (ret.code == 0) {
            successMsg('导出成功,请注意浏览器不要拦截弹出的窗口', () => {
                window.open(baseDownloadUrl + ret.data);
            });
            return;
        }
        errorMsg('导出失败：' + ret.msg);
    }

    function makeWhereJson() {
        whereJsonStr = {
            'Logic': 'And',
            'Filters': [{
                'Field': 'IsDeleted',
                'Operator': 'Equal',
                'Value': showDeleted
            }]
        };

        if (associationId && isNumeric(associationId)) {
            whereJsonStr.Filters.push({
                'Field': 'AssociationId',
                'Operator': 'Equal',
                'Value': associationId
            });

        }

        if (examType != '-1') {
            whereJsonStr.Filters.push({
                'Field': 'ExamType',
                'Operator': 'Equal',
                'Value': examType
            });
        }

        if (examId != '0') {
            whereJsonStr.Filters.push({
                'Field': 'ExamId',
                'Operator': 'Equal',
                'Value': examId
            });
        }
        
        if (paperId != '0') {
            whereJsonStr.Filters.push({
                'Field': 'PaperId',
                'Operator': 'Equal',
                'Value': paperId
            });
        }

        if (isComplated > -1) {
            whereJsonStr.Filters.push({
                'Field': 'Complated',
                'Operator': 'Equal',
                'Value': isComplated
            });
        }

        let _keyword = jVal('keyword');

        if (TestNonNegativeInteger(_keyword)) {
            whereJsonStr.Filters.push({
                'Field': 'Score',
                'Operator': 'Equal',
                'Value': _keyword
            });
        } else if(isChineseIDCard(_keyword) || _keyword.length==20){
            whereJsonStr.Filters.push({
                'Field': 'IdNumber',
                'Operator': 'Equal',
                'Value': _keyword
            })
        }
        else if(_keyword)  {
            whereJsonStr.Filters.push({
                'Logic': 'Or',
                'Filters': [{
                    'Field': 'Name',
                    'Operator': 'Equal',
                    'Value': jVal('keyword')
                }, {
                    'Field': 'IdNumber',
                    'Operator': 'Equal',
                    'Value': jVal('keyword')
                }]
            });
        }

        //sessionStorage.setItem('lastWhere'+location.pathname, JSON.stringify(whereJsonStr))
        setWithExpiry('lastWhere' + location.pathname, whereJsonStr, 600, true);
        return whereJsonStr;
    }

    function showLastQuery(){
        let lastWhere = getWithExpiry('lastWhere' + location.pathname,true);
        if(lastWhere && lastWhere.Filters && lastWhere.Filters.length>1){
            setTimeout(()=>{
                [...lastWhere.Filters].forEach(item=>{
                    if(item.Field=='AssociationId'){
                         $('#associationIdView').val(item.Value)
                          associationId = item.Value;                            
                          getExams();
                    }
                    else if(item.Field=='ExamId'){
                        examId=item.Value
                        $('#examId').val(examId)
                        getSelectItems('/exam/Paper/GetPaperMini', { 'examId': examId }, 'paperTplInit', 'paperId', false)
                    }
                    else if(item.Field=='ExamType'){
                        $('#examType').val(item.Value)
                    }
                    else if(item.Field=='PaperId'){
                        $('#paperId').val(item.Value)
                    }
                    else if(item.Field=='Complated'){
                        $('#isComplated').val(item.Value)
                    }
                    else if(item.Field=='IdNumber'|| item.Field=='Name'|| item.Field=='Score'){
                        $('#keyword').val(item.Value)
                    }
                })
                form.render();
                layer.tips('已加载上次的输入搜索条件', '#queryGroup', {
                        tips: [3, 'var(--bg-success-color)']
                })
                getUserRecord();
            },200)            
        } else {
        getUserRecord();
        }
    }

    function RemoveUserRecord(urid) {
        layer.confirm("<b style='color:red'>执行该操作会强制将用户答题记录作废，若此时用户正在作答，将会造成不可预知的错误！请确认要删除的记录所对应的答题人已经退出答题窗口。<br />执行成功后，将会向答题人所用账号对应的邮箱发送一封邮件通知，若该账号未绑定邮箱，通知将发送失败，请确保答题人知晓自己原有的答题记录已被清理。</b><br>确定继续执行删除操作吗？"
            , { icon: 0, btn: ['确定', '确定并邮件通知用户', '取消'] }, async function (index1) {
                await DoRemove(urid, 0)
                layer.close(index1);
            }, async function (index2) {
                await DoRemove(urid, 1)
                layer.close(index2);
            })
    }

    async function DoRemove(urid, notice) {
        let formData = new FormData();
        formData.append(csrfTokenKey, requestToken);
        formData.append('urid', urid);
        formData.append('notice', notice)
        let json = await request('POST', '@Url.Action("RemoveRecord")', formData, CT);
        if (json.code == 0) {
            successMsg('操作成功');
            getUserRecord();
        } else {
            errorMsg(json.msg)
        }
    }

    function SyncOnlineScoreToApplyMain(stage) {
        warnMsg('暂不支持');
        return;
        layer.alert('同步成绩分为2种情况，<br />一种是增量同步，主要是排查那些有测评成绩却没有更新到申报表的情况，<br />另一种是全量同步，即不论申报表里的成绩是否存在，一律已答题记录为准重新同步(耗时长，非必要不推荐)', {
            icon: 0,
            btn: ['增量同步', '全量同步(慎重！)', '取消'],
            btn1: v => {
                TT.tips('您选择了【增量同步】');
                DoSync(stage, 0)
                layer.close(v)
            },
            btn2: v2 => {
                TT.tips('您选择了【全量同步】');
                DoSync(stage, 1)
                layer.close(v2)
            },
            btn3: v3 => {
                TT.tips('您取消了此次操作');
                layer.close(v3)
            }
        })
    }

    function DoSync(stage, isForce) {
        warnMsg('暂不支持');
        return;
        $.post('@Url.Action("SyncOnlineScoreToApplyMain")', { 'associationId': associationId, 'stage': stage, 'isForce': isForce, '__RequestVerificationToken': token }, v => {
            if (v.code == 1) {
                successMsg('同步成功')
                return;
            }
            errorMsg('同步失败');
        })
    }

    function ForceMarkingBatch() {
        let _table = layui.table;
        let checkedRows = _table.checkStatus('table');
        examValues = checkedRows.data.map(u=>u.id);
        if ( examValues.length == 0) {
            errorMsg('请先选择一场考试');
            return;
        }

        layer.confirm('批量执行强制交卷，不会检查用户当前的答题情况，而是直接将勾选试卷被设置为提交状态，且<b style="color:orange">客观题</b>部分会被判定相应分数。<br/>若本场考试尚未结束，建议在考试结束后统一执行；<br/>若试卷已经提交，该操作不会进行任何修改。<br/>确定要继续执行吗？', { icon: 0 }, async (index) => {

            let formData = new FormData();
            examValues.forEach(urid => {
                formData.append('urids[]', urid);
            })
            formData.append('__RequestVerificationToken', token);
            
            var ret = await request('POST', '@Url.Action("ForceMarkingBatch")', formData, { 'Content-Type': 'multipart/form-data' });
            layer.close(index)
            if (ret.code == 0) {
                successMsg('操作成功');
                getUserRecord();
            } else {
                errorMsg('操作失败'+ret.msg);
            }

        })
    }

    //验证Guid形式
    function TestGuid(testID) {
        var reg = new RegExp(/^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$/);
        if (reg.test(testID)) {
            return true;
        }
        return false;
    }

    function TestNonNegativeInteger(str) {
        if (isChineseIDCard(str))
            return false;
        var num = Number(str);
        //return isNaN(num) ? false : parseInt(str, 10) >= 0;
        return isNaN(num) ? false : Math.abs(parseInt(str, 10)) >= 0;

    }

    function isChineseIDCard(id) {
        var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
        return reg.test(id);
    }

</script>