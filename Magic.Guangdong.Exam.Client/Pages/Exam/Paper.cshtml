@page
@model Magic.Guangdong.Exam.Client.Pages.Exam.PaperModel
@{
    Layout = "_LayoutExam";
}
<style>
    .parent {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        grid-template-rows: repeat(5, 1fr);
        grid-column-gap: 0px;
        grid-row-gap: 0px;
    }

    .contentDiv {
        grid-area: 1 / 1 / 6 / 7;
    }

    .sideDiv {
        grid-area: 1 / 7 / 6 / 9;
        margin-left: 20px;
        /* margin-top:-10px;        */
    }

    .contentDiv article {
        position: relative; /* 设置为相对定位容器 */
        min-height: 768px;
        padding-bottom: 40px; /* 为 footer 留出足够的空间，防止内容被遮挡 */
    }

    .contentDiv footer {
        position: absolute; /* 设置为绝对定位 */
        bottom: 0; /* 使 footer 紧贴 article 底部 */
        width: 100%; /* 使 footer 宽度与 article 相同 */
        background-color: #f5f5f5; /* 添加背景色以覆盖可能存在的内容 */
        box-sizing: border-box; /* 包含 padding 在内计算宽度 */
        padding: 1rem; /* 可根据需要设置 footer 内边距 */
    }

</style>

<main class="container">
    @* <div id="editor-container" style="height: 500px; border: 1px solid #ccc;"></div> *@
    <h4 id="paperTitle">@Model.ExamTitle</h4>
    <div class="parent" id="parentDiv">
        <div class="contentDiv">
            <article id="main">
            </article>

            <article id="backup" class="contentDiv" style="display:none">
                <header id="errMsg"></header>
                <h1 aria-busy="true"></h1>

                <footer style="text-align:center">
                    <a href="/exam/paper?urid=@Model.urid&pid=@Model.PaperId" role="button" class="contrast outline">刷新重试</a>
                </footer>
            </article>

            <input type="hidden" id="lastAnswer" value="@Model.SubmitAnswer" />
        </div>

        <article class="sideDiv">
            <header>
                <button id="submitPaper"
                        style="cursor:pointer;border-color:white;"
                        class="pico-background-red-500 container-fluid submitEnabled"
                        data-target="modal-submit"
                        onClick="togglePicoModal(event)">
                    交卷
                </button>
                <button id="submitPaperDisabled"
                        class="pico-background-grey-300 container-fluid submitDisabled"
                        style="display:none;border-color:white;">
                    已交卷
                </button>
            </header>

            @* <details class="dropdown" style="margin-top:20px">
            <summary role="button" class="outline">答题卡</summary>
            <ul id="answerSheet">
            </ul>
            </details> *@

            <div style="margin-top:20px;height:580px;overflow-y:auto">
                <h5>答题卡</h5>
                @* <hr /> *@
                <div id="answerWarp">
                </div>
            </div>

            <p style="margin:20px">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clock-history" viewBox="0 0 16 16" style="margin-bottom:5px;">
                    <path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022l-.074.997zm2.004.45a7.003 7.003 0 0 0-.985-.299l.219-.976c.383.086.76.2 1.126.342l-.36.933zm1.37.71a7.01 7.01 0 0 0-.439-.27l.493-.87a8.025 8.025 0 0 1 .979.654l-.615.789a6.996 6.996 0 0 0-.418-.302zm1.834 1.79a6.99 6.99 0 0 0-.653-.796l.724-.69c.27.285.52.59.747.91l-.818.576zm.744 1.352a7.08 7.08 0 0 0-.214-.468l.893-.45a7.976 7.976 0 0 1 .45 1.088l-.95.313a7.023 7.023 0 0 0-.179-.483zm.53 2.507a6.991 6.991 0 0 0-.1-1.025l.985-.17c.067.386.106.778.116 1.17l-1 .025zm-.131 1.538c.033-.17.06-.339.081-.51l.993.123a7.957 7.957 0 0 1-.23 1.155l-.964-.267c.046-.165.086-.332.12-.501zm-.952 2.379c.184-.29.346-.594.486-.908l.914.405c-.16.36-.345.706-.555 1.038l-.845-.535zm-.964 1.205c.122-.122.239-.248.35-.378l.758.653a8.073 8.073 0 0 1-.401.432l-.707-.707z" />
                    <path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0v1z" />
                    <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5z" />
                </svg>&nbsp;
                <strong>
                    剩余时长：<u id="countdownTimer">00:00:00</u>
                </strong>
            </p>

        </article>


    </div>

    <!-- Progress -->
    @* <progress id="answerProgress"></progress> *@
    <dialog id="modal-submit">
        <article>

            <header>注意</header>
            <p id="userInfo">
                本场考试一共 <u id="questionCnt" style="color:#1e88e5;font-weight:bolder">0</u> 道题，已提交 <u id="submitCnt" style="color:#f4511e;font-weight:bolder">0</u> 道题；<br />确认交卷后，将无法再进行修改，确定交卷吗？
            </p>

            <footer>
                <a href="#cancel"
                   role="button"
                   id="btnCancel"
                   class="secondary"
                   data-target="modal-submit"
                   onClick="togglePicoModal(event)">
                    再想想
                </a>
                <a href="#confirm"
                   role="button"
                   id="btnSubmit"
                   style="background-color:#1e88e5;border-color:#1e88e5"
                   data-target="modal-submit"
                   class="submitEnabled"
                   onClick="SubmitMyPaper(0)">
                    确定
                </a>
                <a href="#confirm"
                   role="button"
                   id="btnSubmit2"
                   style="background-color:#43a047;border-color:#43a047;display:none"
                   class="submitDisabled"
                   data-target="modal-submit">
                    确定
                </a>
            </footer>
        </article>
    </dialog>
</main>

<script src="~/web/exam/paper.js"></script>

<script type="text/html" id="answerWarpTpl">
    {{# layui.each(d, function(index, item){ }}
    {{# if(typeNames.indexOf(item.TypeName)==-1) { typeNames.push(item.TypeName) }}

    <p style="font-size:16px;color:#C6C6C6;margin-top:15px;margin-bottom:5px"><span>{{item.TypeName}}</span></p>

    {{# } }}
    {{# if(answerArr && answerArr.filter(u=>u.questionId==item.Id).length>0){ }}
        <a role="button" href="javascript:;"style="margin-top:2%;padding:2%;width:18%"  onclick="renderQuestion({{index}})">{{index + 1}} </a>
    {{# } else { }}
        <a role="button" class="outline"style="margin-top:2%;padding:2%;width:18%" href="javascript:;"  onclick="renderQuestion({{index}})">{{index + 1}} </a>
    {{# } }}
    {{# }) }}
</script>


<script type="text/html" id="mainTpl">

    <header>
       <div id="questionTitle">{{ processTitle(d.TitleRaw,d.orderIndex) }}</div>
       <kbd class="pico-background-jade-350" style=" margin-top:10px">{{d.TypeName}}({{d.ItemScore}}分)</kbd>
    </header>
    <div class="body" style="margin-bottom:50px">
         <div class="questionMaterials"  style="text-align:center">
            {{# if(d.Materials && d.Materials.length>0){ }}
                {{# layui.each(d.Materials,function(index,item) { }}
                    <img class="questionmaterial" src="{{item.url}}" id="material_{{item.ConnName}}_{{item.ConnId}}"/>
                {{# }) }}
            {{# } }}
        </div>
        {{# if(d.IsObjective==1){ }}
            <div class="optionItem">
                {{# layui.each(d.Items,function(index,item){ }}
                    {{# let currItems = answerArr.filter(u=>u.questionId==d.Id) }}
                    {{# let optionContent = item.Code }}
                    {{# if(item.DescriptionTxt) optionContent+="、"+item.DescriptionTxt; }}
                    {{# if(currItems.length==1&&currItems[0].userAnswer.includes(item.Id.toString()) ){ }}
                        <a role="button" style="margin-top:1vh;width:100%" href="javascript:;"  class="correct option" data-itemid="{{item.Id}}" data-questionid="{{d.Id}}" data-single="{{d.SingleAnswer==1}}" >
                            {{- optionContent }}

                            {{# if(item.Materials && item.Materials.length>0){ }}
                                {{# layui.each(item.Materials,function(index,item) { }}
                                    <img class="questionmaterial" src="{{item.url}}" id="material_{{item.ConnName}}_{{item.ConnId}}"/>
                                {{# }) }}
                            {{# } }}
                           
                        </a>
                        {{#} else { }}
                         <a role="button"style="margin-top:1vh;width:100%" href="javascript:;"  class="secondary outline option" data-itemid="{{item.Id}}" data-questionid="{{d.Id}}" data-single="{{d.SingleAnswer==1}}" >
                             {{- optionContent}}

                              {{# if(item.Materials && item.Materials.length>0){ }}
                                {{# layui.each(item.Materials,function(index,item) { }}
                                    <img class="questionmaterial" src="{{item.url}}" id="material_{{item.ConnName}}_{{item.ConnId}}"/>
                                {{# }) }}
                                {{# } }}
                         </a>
                    {{#} }}
                {{# }) }}
            </div>
        {{#} else if(d.TypeName.indexOf('编程')>-1 || d.TypeName.indexOf('代码')>-1) { }}
            <div class="codeItem">
                <select id="codelanguage"  aria-label="请选择适合自己的编程语言作答">
                    <option value=""  disabled>请选择适合自己的编程语言作答</option>
                    <option value="cpp">c/c++</option>
                    <option value="csharp">c#</option>
                    <option value="go">go</option>
                    <option value="java">java</option>
                    <option value="javascript" selected>javascript</option>
                    <option value="php">php</option>
                    <option value="python">python</option>
                    <option value="sql">sql（数据库编程题请选择此项）</option>
                </select>
                <div id="code_{{d.Id}}" style="height:700px; border: 1px solid #ccc;"></div>
                <small style="margin-top:0.4vh">在上述为代码编辑器中编写程序</small>
            </div>
        {{#} else { }}
            <div class="textItem" >
                {{# if(!answerArr.includes(d.Id.toString())) { }}
                <textarea
                    id="content_{{d.Id}}"
                    class="content_answer"
                    placeholder="写下您的答案"
                    style="height:36vh"></textarea>
                {{# } else { }}
                <textarea
                    id="content_{{d.Id}}"
                    class="content_answer"
                    placeholder="写下您的答案"
                    style="height:36vh"></textarea>
                {{# } }}
                <small style="margin-top:0.4vh">在上述为本框中写下您的答案</small>
            </div>

        {{# } }}
    </div>
    <footer>
        {{# if(d.orderIndex > 1){ }}
            <a href="javascript:;" onclick="renderQuestion({{d.orderIndex-2}})" id="previous" role="button" class="contrast outline">上一题({{d.orderIndex-1}})</a>
        {{# } else { }}
            <a href="javascript:;" disabled id="previous" role="button" class="contrast outline">上一题</a>
        {{# } }}

        {{# if(d.orderIndex>=questionObj.total){ }}
            <a href="javascript:;"  id="next" role="button" class="outline" data-target="modal-submit" onClick="togglePicoModal(event)" style="float:right;border-color:#e53935;color:#e53935">交卷</a>
        {{#} else { }}
            <a href="javascript:;" onclick="renderQuestion({{d.orderIndex}})" id="next" role="button" class="outline" style="float:right">下一题({{d.orderIndex+1}})</a>
        {{# } }}
    </footer>
</script>

<script src="~/plugins/monaco-editor/min/vs/loader.min.js"></script>
<script>

     let urid = '@Model.urid';
     let paperId = '@Model.PaperId';
     let answerArr = [];
     let createdAtStr = '@Model.CreatedAt';
     let RemainSecond = '@Model.RemainSecond';
     let paperDetail;
     let questionObj = {
         total: 0
     };
     let countdown;//倒计时
     let stopExecution;//定时执行动动作
     let editorManager;//代码编辑器
     let typeNames = [];

     if (jVal('lastAnswer'))
         answerArr = JSON.parse(jVal('lastAnswer'));

     if (sessionStorage.getItem("answerArr"))
         answerArr = JSON.parse(sessionStorage.getItem("answerArr"));


     executeFunctions([generationPaper, renderPaper]);

     //生成试卷
     async function generationPaper() {
         if (sessionStorage.getItem('paperDetail')) {
             paperDetail = JSON.parse(sessionStorage.getItem("paperDetail"));
         } else {
             let formData = new FormData();
             formData.append('paperId', paperId);
             formData.append('__RequestVerificationToken', requestToken);
             let ret = await request('POST', '/examclient/GetMyPaper', formData, CT);

             if (ret.code != 0) {
                 toggleError(true, "获取考卷信息异常，请刷新重试");
                 return;
             }
             sessionStorage.setItem('paperDetail', ret.data);
             paperDetail = JSON.parse(ret.data);
         }
         //renderPaper();
     }

     //渲染基本信息
     function renderPaper() {
         toggleError(false);

         if (paperDetail && paperDetail.Questions) {
             questionObj.total = paperDetail.Questions.length;
             countdown = startCountdown(RemainSecond, 'countdownTimer', countdownEnded);
             renderQuestion(0);
             renderAnswerSheet();
             stopExecution = executeAtInterval(60000, async () => { await SubmitMyPaper(4) }); // 每隔分钟执行一次 myCallback

             executeAtInterval(2000, () => {
                 let leftTime = countdown.getRemainingTime();
                 if (leftTime > 60 && leftTime < 300) {
                     $('#countdownTimer').addClass('pico-color-amber-200');
                 } else if (leftTime > 0 && leftTime < 60) {
                     $('#countdownTimer').addClass('pico-color-red-500');
                 }

             });
         }
     }

     function listenLastObjective(elemId){

         autoSearch(elemId, (data) => {
             console.log('有输入变化');
             console.log(data)
         })
     }

     //渲染答题卡
     function renderAnswerSheet() {
         typeNames = [];
         if (confirmAnswerArr())
             answerArr = JSON.parse(confirmAnswerArr());

         renderTpl("answerWarpTpl", "answerWarp", paperDetail.Questions, false)

         jHtmlSet("questionCnt", questionObj.total)
         jHtmlSet("submitCnt", answerArr.length);
         if (questionObj.total == answerArr.length) {
             $("#submitCnt").css("color", "#1e88e5")
         } else {
             $("#submitCnt").css("color", "#f4511e")
         }
     }

     //渲染题目
     function renderQuestion(index) {
         if (index >= paperDetail.Questions.length)
             return;
         currQuestion = paperDetail.Questions[index];
         currQuestion.orderIndex = index + 1;
         renderTpl("mainTpl", "main", currQuestion, false);

         //选择题会执行下面
         makeOption(currQuestion.SingleAnswer);

         if (currQuestion.IsObjective == 0) {

             listenSubjectiveInput(currQuestion.Id)
         }
         $('.contentDiv article').css('min-height', '768px')
         if (currQuestion.TypeName.indexOf('编程') > -1 || currQuestion.TypeName.indexOf('代码') > -1) {
             $('.contentDiv article').css('min-height', '1100px')
             renderCodeQuestion()
         }

     }

     //渲染选项(选择题会执行)
     function makeOption(isSingle) {
         $(".option").click(obj => {
             let elem = $(obj.currentTarget);
             if (isSingle == 1 && elem.hasClass("secondary outline")) {
                 $(".option").addClass("secondary outline").removeClass("correct")
             }
             let choice = {
                 "questionId": elem.data("questionid"),
                 "itemId": elem.data("itemid"),
                 "isSingle": elem.data("single")
             }
             if (elem.hasClass("secondary outline")) {
                 elem
                     .removeClass("secondary outline")
                     .addClass("correct");
                 makeChoice(choice);
             }
             else {
                 elem
                     .addClass("secondary outline")
                     .removeClass("correct");
                 cancleChoice(choice);
             }

         })

     }

     //选中，并构造数组（选择题会执行）
     function makeChoice(obj) {
         let userAnswer = [];
         let answerArrItem = {};
         if (obj.isSingle) {
             //如果是单选题，且列表里已经有选项，就清空重置
             let index = answerArr.indexOf(answerArr.filter(u => u.questionId == obj.questionId)[0]);
             // console.log(index)
             if (index > -1)
                 answerArr.splice(index, 1);
         } else if (answerArr.filter(u => u.questionId == obj.questionId).length > 0) {
             answerArrItem = answerArr.filter(u => u.questionId == obj.questionId)[0];

             userAnswer = answerArrItem.userAnswer;
             answerArr.splice(answerArr.indexOf(answerArrItem), 1);

         }
         userAnswer.push(obj.itemId.toString())
         answerArr.push({ "questionId": obj.questionId, "userAnswer": userAnswer })

         sessionStorage.setItem("answerArr", JSON.stringify(answerArr));
         renderAnswerSheet();
     }

     //取消选中，并构造数组（选择题执行）
     function cancleChoice(obj) {
         if (answerArr.filter(u => u.questionId == obj.questionId).length == 0) {
             return;
         }

         let index = answerArr.indexOf(answerArr.filter(u => u.questionId == obj.questionId)[0]);

         let userAnswer = answerArr.filter(u => u.questionId == obj.questionId)[0].userAnswer;
         let itemIndex = userAnswer.indexOf(obj.itemId.toString());

         if (itemIndex > -1) {
             userAnswer.splice(itemIndex, 1)
         }
         answerArr.splice(index, 1);
         if (userAnswer.length > 0) {
             answerArr.push({ "questionId": obj.questionId, "userAnswer": userAnswer })
         }

         sessionStorage.setItem("answerArr", JSON.stringify(answerArr))
         renderAnswerSheet();
     }

     //监听主观题输入
     function listenSubjectiveInput(questionId) {
         let elemId = 'content_' + questionId;
         let answerArrItem = {};
         if (answerArr.filter(u => u.questionId == questionId).length > 0) {
             jValSet(elemId, answerArr.filter(u => u.questionId == questionId)[0].userAnswer)
         }
         monitorAswer(elemId, () => {
             let userAnswer = [];
             let elemValue = jVal(elemId);
             if (answerArr.filter(u => u.questionId == questionId).length > 0) {
                 answerArrItem = answerArr.filter(u => u.questionId == questionId)[0];
                 userAnswer = answerArrItem.userAnswer;
                 answerArr.splice(answerArr.indexOf(answerArrItem), 1);
             }

             if (elemValue) {
                 userAnswer = [];
                 userAnswer.push(elemValue)
                 answerArr.push({ "questionId": questionId, "userAnswer": userAnswer })
             }
             sessionStorage.setItem("answerArr", JSON.stringify(answerArr));
         })
         renderAnswerSheet();
     }

     //渲染编程题
     function renderCodeQuestion() {
         let lastCode = sessionStorage.getItem('currCode_' + currQuestion.Id);

         //如果缓存里没有代码记录，且已提交的答案里包含了编程题答案，更新代码缓存
         if (!lastCode &&
             answerArr.filter(u => u.questionId == currQuestion.Id).length > 0 &&
             answerArr.filter(u => u.questionId == currQuestion.Id)[0].userAnswer
         ) {
             sessionStorage.setItem('currCode_' + currQuestion.Id, answerArr.filter(u => u.questionId == currQuestion.Id)[0].userAnswer[0])
         }

         setTimeout(async () => {
             let editorObj = {
                 containerId: 'code_' + currQuestion.Id,
                 defaultCode: sessionStorage.getItem('currCode_' + currQuestion.Id)
             }

             editorManager = createMonacoEditor(editorObj);
             await editorManager.init();

             listenChange('codelanguage', (data) => {
                 console.log($(data.target).val())
                 editorManager.setLanguage($(data.target).val())
             })

             editorManager.monitorCode(currQuestion.Id);

         }, 50)
     }

     function togglePicoModal(event){
         renderAnswerSheet()
         toggleModal(event)
     }

     //错误提示
     function toggleError(show, msg = '') {
         jHtmlSet("errMsg", msg);
         if (show) {
             $("#main").hide();
             $("#backup").show();
         } else {
             $("#backup").hide();
             $("#main").show();
         }
     }


     // 使用示例：传入剩余秒数、倒计时标签ID和结束时的回调函数
     function countdownEnded() {
         TT.error('考试时间到，系统将为您自动提交考试结果');
         SubmitMyPaper(1)
         console.log('Countdown has ended!');
     }

     async function SubmitMyPaper(complatedMode) {
         let myCurrAnswer = confirmAnswerArr();
         sessionStorage.setItem("answerArr", myCurrAnswer);
         let params = new FormData();
         params.append("recordId", urid);
         params.append("reportId", '@Model.ReportId');
         params.append("idNumber", '@Model.ReportNumber');
         params.append("userId", accountId);
         params.append("complatedMode", complatedMode);
         params.append("submitAnswerStr", myCurrAnswer);
         params.append("isPractice", 0);
         params.append("__RequestVerificationToken", requestToken);
         if (complatedMode != 4) {
             sessionStorage.clear();
             $('.submitEnabled').hide();
             $('.submitDisabled').show();
         }

         let json = await request('POST', '/examclient/SubmitMyPaper', params, CT);
         closeModal(document.getElementById('modal-submit'));

         if (json.code < 0) {
             TT.error(json.msg);
             setTimeout(() => {
                 location.reload();
             }, 3500);
             return;
         }

         //console.log(json);
         if (json.code == 0 && complatedMode != 4) {
             //closeModal(document.getElementById('modal-submit'));
             TT.success('交卷成功', () => {
                 location.href = '/exam/result?urid=' + urid;
                 $('.submitEnabled').show();
                 $('.submitDisabled').hide();
             })
             return;
         }



         if(json.data && JSON.parse(json.data)){
             let jsonData=JSON.parse(json.data);

             if(jsonData.Complated==0)
                 return;
             let errMsg = '您的试卷出现异常，请联系本场监考老师或相关管理人员';
             if(jsonData.Complated==1 && jsonData.ComplatedMode==2){
                 errMsg = '您的试卷已被后台管理员强制提交，如有疑问请联系本场监考老师或相关管理人员';
             } else if(jsonData.Complated==1){
                 errMsg = '您的试卷已提交，如有疑问请联系本场监考老师或相关管理人员';
             }

             TT.error(errMsg);
             setTimeout(()=>{
                 location.href = '/exam/result?urid=' + urid;
                 $('.submitEnabled').show();
                 $('.submitDisabled').hide();
             },3500);
             return;
         }

     }


    function checkWindowSize() {
         const width = window.innerWidth;
         const height = window.innerHeight;
         console.log("宽："+width)
         console.log("高："+height)
         if (width < 1024 || height < 500) {
             //alert("检测到您正在使用小尺寸的屏幕进行答题，目前没有支持小尺寸屏幕的计划，请移步PC端或者最大化您的浏览器后进行答题！");
            TT.success("检测到您正在使用小尺寸的屏幕进行答题，系统即将自动跳转！",()=>{
                location.href = location.href.replace('/exam/','/exammobile/')
            });
         }
     }
     function debounce(func, wait) {
         let timeout;
         return function(...args) {
             clearTimeout(timeout);
             timeout = setTimeout(() => func.apply(this, args), wait);
         };
     }

     const debouncedCheckWindowSize = debounce(checkWindowSize, 300);

     // 初始化检查
     checkWindowSize();

     // 监听窗口大小变化
    window.addEventListener('resize', debouncedCheckWindowSize);
</script>