@using System.Text.RegularExpressions
@using Newtonsoft.Json
@{
    Layout = "../Shared/_LayoutContent.cshtml";
}
@model Magic.Guangdong.DbServices.Dtos.Teacher.TeacherSubjectiveMarkDto
<div class="layui-row">
    <fieldset class="layui-elem-field">
        <legend>基本信息</legend>
        <div class="layui-field-box">
            <form class="layui-form  layui-col-space16">
                <div class="layui-col-md4">
                    <input class="layui-input" value="归属考试： @Model.examInfoDto.ExamTitle" disabled />
                </div>
                <div class="layui-col-md4">
                    <input class="layui-input" value="考卷信息：@Model.examInfoDto.PaperTitle" disabled />
                </div>
                <div class="layui-col-md4">
                    <input class="layui-input" value="考号：@Model.examInfoDto.IdNumber" disabled />
                </div>
            </form>
        </div>
    </fieldset>
</div>
<div class="layui-row" style="margin-top:20px">
    <form class="layui-form" lay-filter="subjectiveForm">
        <fieldset class="layui-elem-field">
            <legend>主观题部分</legend>
            <div class="layui-field-box">
                @{
                    int index = 1;
                    foreach (var item in Model.subjectiveQuestionAndAnswers)
                    {
                        string noHtml = Regex.Replace(item.question.TitleText, @"<[^>]+>", string.Empty);
                        string cleaned = Regex.Replace(noHtml, @"^\d+\u3001", string.Empty);
                        string title = $"<p style='font-size:large;'>{index++}、{cleaned} <b style=\"margin-left:10px;color:#524ED2\"> ({item.question.Score} 分)</u></b>";
                        @Html.Raw(title)

                        if (item.question.TypeName == "编程题")
                        {
                            <div class="codeDiv" id="code_@item.userAnswer.Id" style="height:500px;margin-top:10px" data-score="@item.question.Score" data-code="@item.userAnswer.SubjectiveAnswer.TrimStart('[').TrimEnd(']').TrimStart('"').TrimEnd('"')">
                            </div>
                        }
                        else
                        {
                        //string[] answerContent = JsonConvert.DeserializeObject<string[]>(item.userAnswer.SubjectiveAnswer);
                            <p style="margin-top:10px"></p>
                            <div class="userAnswerContentDiv" id="content_@item.userAnswer.Id" data-score="@item.question.Score" data-content="@item.userAnswer.SubjectiveAnswer.TrimStart('[').TrimEnd(']')">
                            </div>
                        }

                        <br />
                        <blockquote class="layui-elem-quote">题目解析：<br />@Html.Raw(item.question.Analysis)</blockquote>
                        <div class="layui-card">
                            <div class="layui-card-header"><h3>教师评分</h3></div>
                            <div class="layui-card-body">

                                <div class="layui-form-item">
                                    <label class="layui-form-label">得分情况：</label>
                                    <div class="layui-input-block">
                                        <div class="sliderScore" style="margin-top:20px;padding-top:15px" data-score="@item.question.Score" id="sliderScore_@item.userAnswer.Id"></div>
                                    </div>
                                    <input type="hidden" name="QuestionId[]" value="@item.question.Id" />
                                    <input type="hidden" name="SubmitRecordId[]" value="@item.userAnswer.Id" />
                                    <input type="hidden" name="SubjectiveItemScore[]" id="subjectiveItemScore_@item.userAnswer.Id" />
                                </div>
                                <div class="layui-form-item">
                                    <label class="layui-form-label">教师评语：</label>
                                    <div class="layui-input-block">
                                        <textarea placeholder="非必填" name="Remark[]" class="layui-textarea"></textarea>
                                    </div>
                                </div>


                            </div>
                        </div>
                    }
                }
            </div>
        </fieldset>
        <a href="javascript:;" class="layui-btn layui-btn-primary"><i class="layui-icon layui-icon-left"></i>返回</a>

        <a href="javascript:;" lay-filter="save" lay-submit class="layui-btn save"><i class="layui-icon layui-icon-release"></i>提交评分</a>
        <a href="javascript:;" class="layui-btn layui-btn-disabled disabledsave" style="display:none"><i class="layui-icon layui-icon-release"></i>提交中</a>

        <input type="checkbox" title="提交后自动加载下一套试卷" lay-filter="auto" />
    </form>
</div>
<script src="~/plugins/tinymce/tinymce.min.js"></script>
<script src="~/plugins/mytinymce.js"></script>
<script src="~/plugins/monaco-editor/min/vs/loader.min.js"></script>

<script>
    let slider = layui.slider;
    let base_ajax_url = '';
    let form = layui.form;
    let nextRecordId = '';
    let recordId = '@Model.examInfoDto.RecordId';
    let teacherId = getUrlQueryParams('teacherId');
    let examId = getUrlQueryParams('examId');

    renderCodeEditor();
    renderTinymce();
    renderSilderSocre();

    form.on('checkbox(auto)', data => {
        if (data.value) {
            axios.get('@Url.Action("AutoGetNextRecord")', {
                params: {
                    recordId: recordId
                }
            }).then(data => {
                let json = data.data;
                if (json.code == 0) {
                    nextRecordId = json.data;
                } else
                    errorMsg("当前试卷为本次考试的最后一套试卷");
            });
            return;
        }
        nextRecordId = '';
    })

    form.on('submit(save)', async (data) => {
        let params = {
            teacherId: teacherId,
            recordId: recordId,
            itemScoreStr: ''
        }
        let obj = form.val('subjectiveForm');
        params.itemScoreStr = JSON.stringify(processingData(obj));

        console.log(params)
        let formData = objectToFormData(params);
        formData.append(csrfTokenKey, requestToken);
        layer.load();
        $('.save').hide();
        $('.disabledsave').show();
        let json = await request('POST', '@Url.Action("SaveSubjectiveScore")', formData, CT);
        if (json.code == 0) {
            if (nextRecordId) {
                successMsg('提交成功，即将跳转到下一套试卷', () => {
                    location.href = `/Teacher/TeacherExamAssign/Detail?recordId=${nextRecordId}&teacherId=${teacherId}`
                });
                return;
            }
            successMsg('提交成功', () => {
                location.href = `/Teacher/TeacherExamAssign/Papers?teacherId=${teacherId}&examId=${examId}`
            });
        }
        return false;
    })

    function processingData(obj) {
        console.log(obj);
        let delKey = '';
        for (const key in obj) {
            if (obj.hasOwnProperty(key) && key.indexOf('_') > -1) { // 确保只遍历对象自身的属性，不包括原型链上的
                console.log(key);
                delKey = key;
                continue;
            }
        }
        if (delKey)
            delete obj[delKey];
        return convertToObjectArray(obj);
    }

    function convertToObjectArray(obj) {
        let result = [];
        let keys = Object.keys(obj);

        // 假设SubmitRecordId和SubjectiveItemScore总是成对出现
        for (let i = 0; i < keys.length / 2; i++) {
            let recordIdKey = 'SubmitRecordId[' + i + ']';
            let scoreKey = 'SubjectiveItemScore[' + i + ']';
            let questionKey = 'QuestionId[' + i + ']';
            let remarkKey = 'Remark[' + i + ']';

            if (keys.includes(recordIdKey) && keys.includes(scoreKey)) {
                let item = {
                    SubmitRecordId: parseInt(obj[recordIdKey], 10),
                    QuestionId: parseInt(obj[questionKey], 10),
                    // 添加对SubjectiveItemScore为空或非数字值的处理
                    Score: isNaN(parseInt(obj[scoreKey], 10)) ? 0 : parseInt(obj[scoreKey], 10),
                    Remark: obj[remarkKey]
                };
                result.push(item);
            }
        }

        return result;
    }

    //渲染打分组件
    function renderSilderSocre() {
        let sliders = document.getElementsByClassName('sliderScore');
        for (let i = 0; i < sliders.length; i++) {

            slider.render({
                elem: '#' + sliders[i].id,
                min: 0,
                max: sliders[i].dataset.score,
                tips: true, // 开启提示文本
                tipsAlways: false, // 开启始终显示提示文本
                input: true, // 输入框
                //type: 'vertical' // 垂直滑块
                change: (value) => {
                    let scoreId = sliders[i].id.replace('sliderScore_', 'subjectiveItemScore_');
                    jValSet(scoreId, value);
                }
            });
        }
    }

    //转换为富文本
    function renderTinymce() {

        let contents = document.getElementsByClassName('userAnswerContentDiv');

        for (let i = 0; i < contents.length; i++) {
            ClearTinymce(contents[i].id);
            InitTinymce(contents[i].id, contents[i].dataset.content, '@Magic.Guangdong.Assistant.ConfigurationHelper.GetSectionValue("resourcehost")', '')
        }
    }

    //转换为代码编辑
    function renderCodeEditor() {
        let codeElems = document.getElementsByClassName('codeDiv');

        for (let i = 0; i < codeElems.length; i++) {

            let editorObj = {
                containerId: codeElems[i].id,
                defaultCode: codeElems[i].dataset.code
            }
            //console.log(editorObj)
            let editorManager = createMonacoEditor(editorObj)
            setTimeout(async () => {
                await editorManager.init();

            }, 100)
        }
    }

    // 在调用页面引入了Monaco Editor库
    //function createMonacoEditor(containerId, initialLanguage, defaultCode) {
    function createMonacoEditor(edtiorParmas) {
        const container = document.getElementById(edtiorParmas.containerId);

        if (!container) {
            throw new Error(`Container with id "${edtiorParmas.containerId}" not found.`);
        }

        return {
            async init() {
                // 加载Monaco编辑器核心模块和语言包
                await new Promise((resolve) => {
                    require.config({ paths: { 'vs': '/plugins/monaco-editor/min/vs' } });
                    require(['vs/editor/editor.main'], resolve);
                });

                // 初始化Monaco编辑器配置和默认值
                const editorOptions = {
                    language: edtiorParmas.initialLanguage || 'javascript',// 默认为JavaScript，若传入语言则使用传入的语言
                    theme: edtiorParmas.theme || 'vs-dark',
                    automaticLayout: true,
                };

                // 创建Monaco编辑器实例
                this.currentEditor = monaco.editor.create(container, editorOptions);
                // 如果提供了默认代码，则写入编辑器
                if (edtiorParmas.defaultCode) {
                    this.currentEditor.setValue(edtiorParmas.defaultCode.replaceAll('\\r\\n', '\r\n'));
                    //this.currentEditor.setValue('function test(){\r\n console.log(123)\r\n}',1)
                }


            },

            /**
             * 获取编辑器内的代码内容
             * returns {string} 编辑器内的代码文本
             */
            getCodeContent() {
                if (!this.currentEditor) {
                    throw new Error('Editor has not been initialized yet.');
                }
                return this.currentEditor.getValue();
            },
            /**
             * 设置编辑器的语言
             * param {string} language - 编辑器的新语言
             */
            setLanguage(language) {
                const currentEditor = monaco.editor.getModels()[0];
                //currentEditor.setModelLanguage(language);
                monaco.editor.setModelLanguage(currentEditor, language);
            },
            /**
             * 设置编辑器内的代码内容
             * param {string} codeContent - 新的代码内容
             */
            setCodeContent(codeContent) {

                this.currentEditor.setValue(codeContent);
            },

            monitorCode(id) {
                this.currentEditor.onDidChangeModelContent((e) => {

                    sessionStorage.setItem("currCode_" + id, this.currentEditor.getValue());
                });
            }
        };
    }
</script>